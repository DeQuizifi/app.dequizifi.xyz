// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id            String         @id @default(uuid())
  username      String         @unique
  walletAddress String?        @unique
  joinedDate    DateTime       @default(now())
  favQuizTopic  String?
  attempts      QuizAttempt[]
  Rewards       Rewards[]
  balance       Float          @default(0)
  profileStats  ProfileStats[]
}

model Quiz {
  id        Int           @id @default(autoincrement())
  title     String
  category  String
  questions Question[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  attempts  QuizAttempt[]
}

model Question {
  id     Int    @id @default(autoincrement())
  text   String
  quiz   Quiz   @relation(fields: [quizId], references: [id])
  quizId Int
}

model Trophy {
  id        String   @id @default(uuid())
  name      String
  unlocked  Boolean  @default(false)
  icon      String
  rewards   Rewards? @relation(fields: [rewardsId], references: [id])
  rewardsId String?
}

model Rewards {
  id                  String   @id @default(uuid())
  xpLevel             Int
  xpPointsToNext      Int
  xpCurrentPoints     Int
  rank                String
  nextRankUnlockLevel Int
  points              Int      @default(0)
  trophies            Trophy[]
  user                user?    @relation(fields: [userId], references: [id])
  userId              String?
}

model Statistics {
  id        String        @id @default(uuid())
  title     String
  category  String
  createdAt DateTime      @default(now())
  attempts  QuizAttempt[]
}

model QuizAttempt {
  id           String      @id @default(uuid())
  user         user        @relation(fields: [userId], references: [id])
  userId       String
  quiz         Quiz        @relation(fields: [quizId], references: [id])
  quizId       Int // MUST match Quiz.id type
  score        Float
  won          Boolean
  createdAt    DateTime    @default(now())
  statistics   Statistics? @relation(fields: [statisticsId], references: [id])
  statisticsId String?
}

model ProfileStats {
  id                   String        @id @default(uuid())
  overallPoints        Int           @default(0)
  bestRank             String
  weekStatus           String
  quizzesWonThisWeek   Int
  totalQuizzesThisWeek Int
  topCategories        TopCategory[]
  userId               String
  user                 user          @relation(fields: [userId], references: [id])
}

model TopCategory {
  id             String       @id @default(uuid())
  category       String
  quizzesWon     Int
  totalQuizzes   Int
  profileStatsId String
  profileStats   ProfileStats @relation(fields: [profileStatsId], references: [id])
}
